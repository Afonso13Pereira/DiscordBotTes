const { SlashCommandBuilder, PermissionFlagsBits } = require('discord.js');
const EmbedFactory = require('../utils/embeds');
const { EMOJIS } = require('../config/constants');

module.exports = {
  data: new SlashCommandBuilder()
    .setName('reset')
    .setDescription('Reset da base de dados (ADMIN ONLY)')
    .addSubcommand(subcommand =>
      subcommand
        .setName('database')
        .setDescription('Limpa todas as collections da base de dados')
        .addStringOption(option =>
          option
            .setName('confirmacao')
            .setDescription('Digite "CONFIRMAR" para confirmar o reset')
            .setRequired(true)
        )
    )
    .addSubcommand(subcommand =>
      subcommand
        .setName('tickets')
        .setDescription('Limpa apenas tickets, submiss√µes e approvals')
        .addStringOption(option =>
          option
            .setName('confirmacao')
            .setDescription('Digite "CONFIRMAR" para confirmar o reset')
            .setRequired(true)
        )
    )
    .setDefaultMemberPermissions(PermissionFlagsBits.Administrator),

  async execute(interaction, client) {
    const subcommand = interaction.options.getSubcommand();
    
    if (subcommand === 'database') {
      const confirmacao = interaction.options.getString('confirmacao');
      
      if (confirmacao !== 'CONFIRMAR') {
        return interaction.reply({
          embeds: [EmbedFactory.error('‚ùå **Confirma√ß√£o inv√°lida!**\n\nPara resetar a base de dados, voc√™ deve digitar exatamente "CONFIRMAR"')],
          flags: 64
        });
      }
      
      // Confirmar com o usu√°rio
      const confirmEmbed = EmbedFactory.warning([
        '‚ö†Ô∏è **ATEN√á√ÉO: RESET DA BASE DE DADOS**',
        '',
        'Voc√™ est√° prestes a **APAGAR TODOS OS DADOS** da base de dados:',
        '',
        'üóëÔ∏è **Ser√£o apagados:**',
        '‚Ä¢ Todos os tickets ativos',
        '‚Ä¢ Todas as categorias',
        '‚Ä¢ Todas as promo√ß√µes',
        '‚Ä¢ Todas as submiss√µes',
        '‚Ä¢ Todos os approvals',
        '‚Ä¢ Todos os transcripts',
        '‚Ä¢ Todos os logs de a√ß√µes',
        '‚Ä¢ Todos os c√≥digos Telegram',
        '‚Ä¢ Todos os redeems',
        '',
        '‚ùå **Esta a√ß√£o √© IRREVERS√çVEL!**',
        '',
        'Digite "SIM, APAGAR TUDO" para confirmar:'
      ].join('\n'));
      
      await interaction.reply({
        embeds: [confirmEmbed],
        flags: 64
      });
      
      // Aguardar confirma√ß√£o final
      const filter = m => m.author.id === interaction.user.id && m.content === 'SIM, APAGAR TUDO';
      const collector = interaction.channel.createMessageCollector({ filter, time: 30000, max: 1 });
      
      collector.on('collect', async (message) => {
        try {
          // Executar reset
          const success = await client.db.resetDatabase();
          
          if (success) {
            // Limpar cache em mem√≥ria
            client.ticketStates.clear();
            
            const successEmbed = EmbedFactory.success([
              '‚úÖ **Base de dados resetada com sucesso!**',
              '',
              'üóëÔ∏è Todos os dados foram apagados:',
              '‚Ä¢ Tickets ativos',
              '‚Ä¢ Categorias',
              '‚Ä¢ Promo√ß√µes',
              '‚Ä¢ Submiss√µes',
              '‚Ä¢ Approvals',
              '‚Ä¢ Transcripts',
              '‚Ä¢ Logs',
              '‚Ä¢ C√≥digos Telegram',
              '‚Ä¢ Redeems',
              '',
              'üîÑ O bot foi resetado e est√° pronto para uso.'
            ].join('\n'));
            
            await message.reply({ embeds: [successEmbed] });
          } else {
            await message.reply({
              embeds: [EmbedFactory.error('‚ùå Erro ao resetar a base de dados. Verifique os logs.')]
            });
          }
        } catch (error) {
          console.error('Error during database reset:', error);
          await message.reply({
            embeds: [EmbedFactory.error('‚ùå Erro inesperado durante o reset da base de dados.')]
          });
        }
      });
      
      collector.on('end', (collected) => {
        if (collected.size === 0) {
          interaction.followUp({
            embeds: [EmbedFactory.error('‚è∞ Tempo esgotado. Reset da base de dados cancelado.')],
            flags: 64
          });
        }
      });
    }
    
    if (subcommand === 'tickets') {
      const confirmacao = interaction.options.getString('confirmacao');
      
      if (confirmacao !== 'CONFIRMAR') {
        return interaction.reply({
          embeds: [EmbedFactory.error('‚ùå **Confirma√ß√£o inv√°lida!**\n\nPara limpar os tickets, voc√™ deve digitar exatamente "CONFIRMAR"')],
          flags: 64
        });
      }
      
      // Confirmar com o usu√°rio
      const confirmEmbed = EmbedFactory.warning([
        '‚ö†Ô∏è **ATEN√á√ÉO: LIMPEZA DE TICKETS**',
        '',
        'Voc√™ est√° prestes a **APAGAR TODOS OS TICKETS** da base de dados:',
        '',
        'üóëÔ∏è **Ser√£o apagados:**',
        '‚Ä¢ Todos os tickets ativos',
        '‚Ä¢ Todas as submiss√µes',
        '‚Ä¢ Todos os approvals',
        '‚Ä¢ Todos os transcripts',
        '',
        '‚úÖ **Ser√£o mantidos:**',
        '‚Ä¢ Categorias',
        '‚Ä¢ Promo√ß√µes',
        '‚Ä¢ Logs de a√ß√µes',
        '‚Ä¢ C√≥digos Telegram',
        '‚Ä¢ Redeems',
        '',
        '‚ùå **Esta a√ß√£o √© IRREVERS√çVEL!**',
        '',
        'Digite "SIM, APAGAR TICKETS" para confirmar:'
      ].join('\n'));
      
      await interaction.reply({
        embeds: [confirmEmbed],
        flags: 64
      });
      
      // Aguardar confirma√ß√£o final
      const filter = m => m.author.id === interaction.user.id && m.content === 'SIM, APAGAR TICKETS';
      const collector = interaction.channel.createMessageCollector({ filter, time: 30000, max: 1 });
      
      collector.on('collect', async (message) => {
        try {
          // Executar limpeza de tickets
          const success = await client.db.cleanTicketsOnly();
          
          if (success) {
            // Limpar cache em mem√≥ria
            client.ticketStates.clear();
            
            const successEmbed = EmbedFactory.success([
              '‚úÖ **Tickets limpos com sucesso!**',
              '',
              'üóëÔ∏è Dados apagados:',
              '‚Ä¢ Tickets ativos',
              '‚Ä¢ Submiss√µes',
              '‚Ä¢ Approvals',
              '‚Ä¢ Transcripts',
              '',
              '‚úÖ Dados mantidos:',
              '‚Ä¢ Categorias',
              '‚Ä¢ Promo√ß√µes',
              '‚Ä¢ Logs',
              '‚Ä¢ C√≥digos Telegram',
              '‚Ä¢ Redeems',
              '',
              'üîÑ O bot foi resetado e est√° pronto para uso.'
            ].join('\n'));
            
            await message.reply({ embeds: [successEmbed] });
          } else {
            await message.reply({
              embeds: [EmbedFactory.error('‚ùå Erro ao limpar tickets. Verifique os logs.')]
            });
          }
        } catch (error) {
          console.error('Error during tickets cleanup:', error);
          await message.reply({
            embeds: [EmbedFactory.error('‚ùå Erro inesperado durante a limpeza de tickets.')]
          });
        }
      });
      
      collector.on('end', (collected) => {
        if (collected.size === 0) {
          interaction.followUp({
            embeds: [EmbedFactory.error('‚è∞ Tempo esgotado. Limpeza de tickets cancelada.')],
            flags: 64
          });
        }
      });
    }
  }
}; 